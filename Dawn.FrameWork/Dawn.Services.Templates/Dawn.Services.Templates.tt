<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>
<# var manager = new Manager(Host, GenerationEnvironment, true); #>


<# 
	var OutputPath1 =Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile+"..")+"..")+"..");
	OutputPath1=Path.Combine(OutputPath1,"Blog.Core.Services","Services_New");
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
#>


//--------------------------------------------------------------------
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
//     对此文件的更改可能会导致不正确的行为，并且如果重新生成代码，这些更改将会丢失。
//--------------------------------------------------------------------
<# 
	var tableName=config.TableName;
 #>
<# 
if(tableName!=""){
    #>  


using System;
using System.Threading.Tasks;
using Dawn.Commons;
using Dawn.IRepository;
using Dawn.IRepository.Base;
using Dawn.IRepository.UnitOfWork;
using Dawn.IServices;
using Dawn.Entities.Entities;
using Dawn.Services.Base;
namespace Dawn.Services
{	
	/// <summary>
	/// <#=tableName#>Services
	/// </summary>	
	public class <#=tableName#>Services : ServicesBase<<#=tableName#>>, I<#=tableName#>Services
    {
        IRepositoryBase<<#=tableName#>> dal;
        public <#=tableName#>Services(IRepositoryBase<<#=tableName#>> dal)
        {
            this.dal = dal;
            base.BaseDal = dal;
        }
    }
}

<# 
    } else{ 

	#>

<# 
    SqlConnection conn = new SqlConnection(config.ConnectionString); 
    conn.Open(); 
    System.Data.DataTable schema = conn.GetSchema("TABLES"); 
 #>

<# 
    foreach(System.Data.DataRow row in schema.Rows) 
    {  
		manager.StartBlock(row["TABLE_NAME"].ToString()+"Services"+".cs",OutputPath1);
	 #>
	//----------<#=row["TABLE_NAME"].ToString()#>开始----------
    


using System;
using System.Threading.Tasks;
using Dawn.Commons;
using Dawn.IRepository;
using Dawn.IRepository.Base;
using Dawn.IRepository.UnitOfWork;
using Dawn.IServices;
using Dawn.Entities.Entities;
using Dawn.Services.Base;
namespace Dawn.Services
{	
	/// <summary>
	/// <#=row["TABLE_NAME"].ToString()#>Services
	/// </summary>	
	public class <#=row["TABLE_NAME"].ToString()#>Services : ServicesBase<<#=row["TABLE_NAME"].ToString()#>>, I<#=row["TABLE_NAME"].ToString() #>Services
    {
        IRepositoryBase<<#=row["TABLE_NAME"].ToString() #>> dal;
        public <#=row["TABLE_NAME"].ToString() #>Services(IRepositoryBase<<#=row["TABLE_NAME"].ToString() #>> dal)
        {
            this.dal = dal;
            base.BaseDal = dal;
        }
    }
}

	//----------<#=row["TABLE_NAME"].ToString()#>结束----------
	<# 
		manager.EndBlock(); 
		} 

		{  
		manager.StartBlock("ServicesBase.cs",OutputPath1);//文件名
	 #>
    
	//----------开始----------
	

using System;
using System.Threading.Tasks;
using Dawn.Commons;
using Dawn.IRepository;
using Dawn.IRepository.Base;
using Dawn.IRepository.UnitOfWork;
using Dawn.IServices;
using Dawn.Entities.Entities;
using Dawn.Services.Base;
namespace Dawn.Services
{	
	/// <summary>
	/// IRepositoryBase
	/// </summary>	
	public class ServicesBase<TEntity> : IServicesBase<TEntity> where TEntity : class, new()
    {
		public IRepositoryBase<TEntity> BaseDal;
    }
}

	//----------结束----------
	<# 
		manager.EndBlock(); 
		} 

		manager.Process(true);
	}
	#> 

